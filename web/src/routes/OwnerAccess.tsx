// web/src/routes/OwnerAccess.tsx
import { useEffect, useMemo, useState } from "react";
import { useParams, Link } from "react-router-dom";
import { supabase } from "../lib/supabase";
import Spinner from "../components/Spinner";

type Member = {
  id: string;
  user_id: string;
  role: string;
  created_at: string;
  // Optional enrich
  user_email?: string | null;
};

type Invite = {
  id: string;
  email: string;
  role: string;
  token: string;
  expires_at: string;
  accepted_at: string | null;
};

export default function OwnerAccess() {
  const { slug } = useParams();
  const [loading, setLoading] = useState(true);
  const [hotelId, setHotelId] = useState<string | null>(null);
  const [members, setMembers] = useState<Member[]>([]);
  const [invites, setInvites] = useState<Invite[]>([]);
  const [form, setForm] = useState({ email: "", role: "manager" });
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [copyOk, setCopyOk] = useState<string | null>(null);

  useEffect(() => {
    if (!slug) return;
    let alive = true;
    (async () => {
      setLoading(true);
      setError(null);

      // Resolve hotel by slug (RLS ensures you must be a member; only owners can modify)
      const { data: h, error: hErr } = await supabase
        .from("hotels")
        .select("id,name,slug")
        .eq("slug", slug)
        .maybeSingle();

      if (hErr || !h) {
        setError(hErr?.message || "Hotel not found or access denied.");
        setLoading(false);
        return;
      }
      if (!alive) return;

      setHotelId(h.id);

      // Load members
      const { data: mem, error: mErr } = await supabase
        .from("hotel_members")
        .select("id,user_id,role,created_at")
        .eq("hotel_id", h.id)
        .order("created_at", { ascending: true });
      if (mErr) setError(mErr.message);

      // Load invites (owners only; policy restricts)
      const { data: inv, error: iErr } = await supabase
        .from("hotel_invites")
        .select("id,email,role,token,expires_at,accepted_at")
        .eq("hotel_id", h.id)
        .order("created_at", { ascending: false });
      if (iErr) setError(iErr.message);

      setMembers(mem || []);
      setInvites(inv || []);
      setLoading(false);
    })();
    return () => { alive = false; };
  }, [slug]);

  const disabled = !form.email || saving;
  const inviteLinkBase = useMemo(() => `${location.origin}/owner/invite/accept`, []);

  async function sendInvite(e: React.FormEvent) {
    e.preventDefault();
    if (!hotelId) return;
    setSaving(true);
    setError(null);
    try {
      // Owners only (policy will enforce). Token is generated by DB default.
      const { error } = await supabase.from("hotel_invites").insert({
        hotel_id: hotelId,
        email: form.email.trim().toLowerCase(),
        role: form.role,
      });
      if (error) throw error;
      setForm({ email: "", role: "manager" });

      // Refresh invites list
      const { data: inv } = await supabase
        .from("hotel_invites")
        .select("id,email,role,token,expires_at,accepted_at")
        .eq("hotel_id", hotelId)
        .order("created_at", { ascending: false });
      setInvites(inv || []);
    } catch (err: any) {
      setError(err?.message || "Failed to create invite.");
    } finally {
      setSaving(false);
    }
  }

  async function removeMember(id: string) {
    if (!hotelId) return;
    if (!confirm("Remove this member?")) return;
    const { error } = await supabase.from("hotel_members").delete().eq("id", id);
    if (error) return setError(error.message);
    setMembers(members.filter((m) => m.id !== id));
  }

  async function revokeInvite(id: string) {
    if (!confirm("Revoke this invite?")) return;
    const { error } = await supabase.from("hotel_invites").delete().eq("id", id);
    if (error) return setError(error.message);
    setInvites(invites.filter((i) => i.id !== id));
  }

  if (loading) {
    return (
      <main className="min-h-[60vh] grid place-items-center">
        <Spinner label="Loading access…" />
      </main>
    );
  }

  return (
    <main className="max-w-4xl mx-auto p-6">
      <div className="mb-4 flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-semibold">Property access</h1>
          <p className="text-sm text-gray-600">Invite teammates or manage existing members.</p>
        </div>
        <Link to={`/owner/${slug}`} className="btn btn-light">← Back to dashboard</Link>
      </div>

      {error ? <div className="rounded border border-red-300 bg-red-50 p-3 text-sm mb-4">{error}</div> : null}

      {/* Invite form */}
      <section className="rounded-xl border bg-white p-4 mb-6">
        <h2 className="font-medium mb-3">Invite by email</h2>
        <form onSubmit={sendInvite} className="flex flex-col gap-3 sm:flex-row sm:items-end">
          <div className="flex-1">
            <label className="text-sm">Email</label>
            <input
              className="w-full rounded border px-3 py-2 text-sm"
              type="email"
              value={form.email}
              onChange={(e) => setForm((f) => ({ ...f, email: e.target.value }))}
              placeholder="person@hotel.com"
              required
            />
          </div>
          <div>
            <label className="text-sm">Role</label>
            <select
              className="rounded border px-3 py-2 text-sm"
              value={form.role}
              onChange={(e) => setForm((f) => ({ ...f, role: e.target.value }))}
            >
              <option value="manager">Manager</option>
              <option value="frontdesk">Front desk</option>
              <option value="housekeeping">Housekeeping</option>
              <option value="maintenance">Maintenance</option>
              <option value="finance">Finance</option>
              <option value="viewer">Viewer (read-only)</option>
            </select>
          </div>
          <button className="btn" disabled={disabled}>{saving ? "Sending…" : "Send invite"}</button>
        </form>
        <p className="text-xs text-gray-500 mt-2">
          Invitees will sign in with the same email, then open an accept link to gain access.
        </p>
      </section>

      {/* Pending invites */}
      <section className="rounded-xl border bg-white p-4 mb-6">
        <h2 className="font-medium mb-2">Pending invites</h2>
        {invites.length === 0 ? (
          <div className="text-sm text-gray-500">No pending invites.</div>
        ) : (
          <ul className="space-y-2">
            {invites.map((i) => (
              <li key={i.id} className="rounded border p-3 text-sm flex items-center justify-between gap-2">
                <div>
                  <div className="font-medium">{i.email}</div>
                  <div className="text-gray-500 text-xs">
                    Role: {i.role} • Expires: {new Date(i.expires_at).toLocaleString()}
                    {i.accepted_at ? ` • Accepted: ${new Date(i.accepted_at).toLocaleString()}` : ""}
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  {!i.accepted_at ? (
                    <>
                      <button
                        className="btn btn-light"
                        onClick={async () => {
                          await navigator.clipboard.writeText(`${inviteLinkBase}/${i.token}`);
                          setCopyOk(i.id);
                          setTimeout(() => setCopyOk(null), 2000);
                        }}
                      >
                        Copy link
                      </button>
                      <button className="btn btn-light" onClick={() => revokeInvite(i.id)}>Revoke</button>
                    </>
                  ) : (
                    <span className="px-2 py-1 bg-green-50 border border-green-200 rounded text-xs">Accepted</span>
                  )}
                  {copyOk === i.id ? <span className="text-xs text-green-700">Copied!</span> : null}
                </div>
              </li>
            ))}
          </ul>
        )}
      </section>

      {/* Members */}
      <section className="rounded-xl border bg-white p-4">
        <h2 className="font-medium mb-2">Members</h2>
        {members.length === 0 ? (
          <div className="text-sm text-gray-500">No members yet.</div>
        ) : (
          <ul className="space-y-2">
            {members.map((m) => (
              <li key={m.id} className="rounded border p-3 text-sm flex items-center justify-between">
                <div>
                  <div className="font-medium">{m.user_id}</div>
                  <div className="text-xs text-gray-500">Role: {m.role}</div>
                </div>
                <button className="btn btn-light" onClick={() => removeMember(m.id)}>Remove</button>
              </li>
            ))}
          </ul>
        )}
      </section>
    </main>
  );
}
